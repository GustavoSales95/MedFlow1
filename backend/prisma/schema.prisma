// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// Conecta com o banco de dados
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


// Modelo da tabela dos tipos de usuário para serem usados como foreign key
model Perfis {
  id_perfis Int    @id
  tipo      String

  Usuarios Usuarios[]
}

model Usuarios {
  id_usuario Int    @id @default(autoincrement())
  nome       String
  email      String @unique 
  senha      String
  cpf        String @unique
  data_nascimento DateTime @db.Date
  data_Cadastro DateTime @default(now())
  perfil_id  Int
  perfil     Perfis @relation(fields: [perfil_id], references: [id_perfis])

  Medicos    Medicos?
}

model Medicos {
  id_medico     Int      @id @default(autoincrement())
  usuario_id    Int      @unique
  crm           String   @unique
  especialidade String?
  telefone      String?

  Usuarios      Usuarios @relation(fields: [usuario_id], references: [id_usuario])
  Escala        Escala?
  Agendamentos  Agendamentos[]
}

enum Status {
  Escalado
  Folga
}

model Escala {
  id_escala       Int       @id @default(autoincrement())
  id_medico       Int       @unique 
  segunda         Status
  segunda_horario String ? @default("09:00 - 17:00") @db.VarChar(13)
  terca           Status
  terca_horario   String ? @default("09:00 - 17:00") @db.VarChar(13)
  quarta          Status
  quarta_horario  String ? @default("09:00 - 17:00") @db.VarChar(13)
  quinta          Status
  quinta_horario  String ? @default("09:00 - 17:00") @db.VarChar(13)
  sexta           Status
  sexta_horario   String ? @default("09:00 - 17:00") @db.VarChar(13)
  sabado          Status
  sabado_horario  String ? @default("09:00 - 17:00") @db.VarChar(13)
  domingo         Status
  domingo_horario String ? @default("09:00 - 17:00") @db.VarChar(13)
  Medico          Medicos @relation(fields: [id_medico], references: [id_medico])

}

model Pacientes {
  id_paciente      Int      @id @default(autoincrement())
  nome String?
  cpf              String?  @unique
  cartao_sus String? @unique
  data_nascimento  DateTime? @db.Date
  telefone         String?
  cep String?
  endereco         String?
  data_cadastro DateTime @default(now())

  Prontuario Prontuario?
  Agendamentos Agendamentos[]
}

model Prontuario {
  paciente_id          Int    @unique
  alergias             String?
  tipo_sanguineo       String? @db.Char(3)
  medicamentos         String?
  cirurgias            String?
  doencas_infecciosas  String?
  
  Pacientes Pacientes @relation(fields: [paciente_id], references: [id_paciente])
}


enum Situacao {
  Agendado
  Cancelado
  Concluído
}

model Agendamentos {
  id_agendamento Int       @id @default(autoincrement())
  paciente_id    Int
  medico_id      Int
  nome_paciente  String
  data_hora      DateTime
  status         Situacao  @default(Agendado)

  paciente Pacientes @relation(fields: [paciente_id], references: [id_paciente])
  medico   Medicos   @relation(fields: [medico_id], references: [id_medico])
  Consultas Consultas?
}

model Consultas {
  id_consulta    Int      @id @default(autoincrement())
  agendamento_id Int      @unique
  descricao      String?
  receita        String?
  observacoes    String?
  data_consulta  DateTime?

  agendamentos Agendamentos @relation(fields: [agendamento_id], references: [id_agendamento])
}


// Modelo das tabelas de controle de estoque
model Produtos {
  id_produto    Int         @id @default(autoincrement())
  nome           String
  valor          Float
  fornecedor     String
  data_pedido    DateTime @db.Date
  validade       DateTime @db.Date
  embalagem      String
  unidade_medida String
  temperatura    Temperatura
}


enum Temperatura {
  PERECIVEL
  RESFRIADO
  TERMOSSENSIVEL
}
